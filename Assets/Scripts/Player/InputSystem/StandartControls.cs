//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/InputSystem/StandartControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StandartControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StandartControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StandartControls"",
    ""maps"": [
        {
            ""name"": ""DriveControl"",
            ""id"": ""8618f60a-c1de-4d95-80af-bf90c60e0d33"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ca92ff87-dfc5-4a2a-bb36-c62439e24403"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookBack"",
                    ""type"": ""Button"",
                    ""id"": ""e07b9214-aac7-4cad-898f-243a89e1f7cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCameraView"",
                    ""type"": ""Button"",
                    ""id"": ""e3e6284f-e8f1-4432-b810-352f02d55efe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart(DeleteLater)"",
                    ""type"": ""Button"",
                    ""id"": ""cfda5cc1-8177-427e-935e-54e3c49792b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""628da922-c128-4a03-bab1-3cb0d6dd13ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a9e827f5-de66-4025-81b9-08245bf829a3"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48e65a81-f0ec-4ae6-b64e-d382e7d92004"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41c08b1a-b16c-4b91-a634-e894132e4dde"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb10b15d-c1c3-4ae4-837c-f309c2e6f812"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""77825243-999b-49e1-83d9-6ee6bd03b99e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0ce83a56-7693-4e1f-b619-46bb74d4eb05"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7dd790e6-1722-4970-aa26-01bf6b6a5b96"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d8926999-fcb3-497f-aa05-d04b0550296d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0ff2c12-a168-4941-b2b9-20d4e5b324ac"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c0f5d97-08b3-4ebd-8f34-89fe83971e73"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8350961a-ff89-41ee-9af7-d78136638130"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5790acce-2eb5-495c-b7ef-a2b198841c96"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07f16815-3c2c-4ae9-8370-54f2959aaf90"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12b1fbed-c1c9-4512-a193-b5cbe2edd9d6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7195b88e-9d1d-424e-bae5-e039a141508c"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8b0716e-aa12-4145-8b92-3dfb68ae2d4a"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79cacfd6-2ff4-4cca-bd3b-4b4485d5d3bb"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCameraView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36fd4d2a-fff8-4693-a096-37ad37432001"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCameraView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3e447dd-5aaf-472d-9164-98b28ff0218d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart(DeleteLater)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98a86887-a992-4c03-b310-877c2f037e15"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControl"",
            ""id"": ""c474ef0f-4f8a-49dd-ab36-729f85b5bce8"",
            ""actions"": [
                {
                    ""name"": ""PauseButton"",
                    ""type"": ""Button"",
                    ""id"": ""4df554a8-6a64-478f-b8e4-febc8a78ee95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""95663abb-4513-4cd0-989b-25cc111829ac"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64bdb63e-5e5a-4cda-bf53-6e56db590774"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MusicControl"",
            ""id"": ""b9beee8f-5ee6-4a31-b32e-23614645b348"",
            ""actions"": [
                {
                    ""name"": ""NextMusicTrack"",
                    ""type"": ""Button"",
                    ""id"": ""2b5f8a96-4aae-42f2-87a0-3b36df72b27a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousMusicTrack"",
                    ""type"": ""Button"",
                    ""id"": ""0e9618e8-4aa5-4878-b810-60a678613f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMusic"",
                    ""type"": ""Button"",
                    ""id"": ""d8482396-9340-4994-ad79-dca4b8cad27f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4cfc3a0-f9ff-4773-84af-c36e59a8e7c0"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextMusicTrack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92f1e4b2-ea52-45c8-b9e4-d90f041061e3"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousMusicTrack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8abf9a66-7ebb-41b6-8fc9-57c14dacbf65"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMusic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FPSButton"",
            ""id"": ""faa778ed-59a2-4bbb-9b5b-18e1c072c181"",
            ""actions"": [
                {
                    ""name"": ""FPS"",
                    ""type"": ""Button"",
                    ""id"": ""328334a0-8242-4b22-a5be-82a0ab93752e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ca73e92-8ae7-481d-b4d8-3f1281165849"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DriveControl
        m_DriveControl = asset.FindActionMap("DriveControl", throwIfNotFound: true);
        m_DriveControl_Movement = m_DriveControl.FindAction("Movement", throwIfNotFound: true);
        m_DriveControl_LookBack = m_DriveControl.FindAction("LookBack", throwIfNotFound: true);
        m_DriveControl_ChangeCameraView = m_DriveControl.FindAction("ChangeCameraView", throwIfNotFound: true);
        m_DriveControl_RestartDeleteLater = m_DriveControl.FindAction("Restart(DeleteLater)", throwIfNotFound: true);
        m_DriveControl_Brake = m_DriveControl.FindAction("Brake", throwIfNotFound: true);
        // UIControl
        m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
        m_UIControl_PauseButton = m_UIControl.FindAction("PauseButton", throwIfNotFound: true);
        // MusicControl
        m_MusicControl = asset.FindActionMap("MusicControl", throwIfNotFound: true);
        m_MusicControl_NextMusicTrack = m_MusicControl.FindAction("NextMusicTrack", throwIfNotFound: true);
        m_MusicControl_PreviousMusicTrack = m_MusicControl.FindAction("PreviousMusicTrack", throwIfNotFound: true);
        m_MusicControl_PauseMusic = m_MusicControl.FindAction("PauseMusic", throwIfNotFound: true);
        // FPSButton
        m_FPSButton = asset.FindActionMap("FPSButton", throwIfNotFound: true);
        m_FPSButton_FPS = m_FPSButton.FindAction("FPS", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DriveControl
    private readonly InputActionMap m_DriveControl;
    private List<IDriveControlActions> m_DriveControlActionsCallbackInterfaces = new List<IDriveControlActions>();
    private readonly InputAction m_DriveControl_Movement;
    private readonly InputAction m_DriveControl_LookBack;
    private readonly InputAction m_DriveControl_ChangeCameraView;
    private readonly InputAction m_DriveControl_RestartDeleteLater;
    private readonly InputAction m_DriveControl_Brake;
    public struct DriveControlActions
    {
        private @StandartControls m_Wrapper;
        public DriveControlActions(@StandartControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DriveControl_Movement;
        public InputAction @LookBack => m_Wrapper.m_DriveControl_LookBack;
        public InputAction @ChangeCameraView => m_Wrapper.m_DriveControl_ChangeCameraView;
        public InputAction @RestartDeleteLater => m_Wrapper.m_DriveControl_RestartDeleteLater;
        public InputAction @Brake => m_Wrapper.m_DriveControl_Brake;
        public InputActionMap Get() { return m_Wrapper.m_DriveControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveControlActions set) { return set.Get(); }
        public void AddCallbacks(IDriveControlActions instance)
        {
            if (instance == null || m_Wrapper.m_DriveControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DriveControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @LookBack.started += instance.OnLookBack;
            @LookBack.performed += instance.OnLookBack;
            @LookBack.canceled += instance.OnLookBack;
            @ChangeCameraView.started += instance.OnChangeCameraView;
            @ChangeCameraView.performed += instance.OnChangeCameraView;
            @ChangeCameraView.canceled += instance.OnChangeCameraView;
            @RestartDeleteLater.started += instance.OnRestartDeleteLater;
            @RestartDeleteLater.performed += instance.OnRestartDeleteLater;
            @RestartDeleteLater.canceled += instance.OnRestartDeleteLater;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(IDriveControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @LookBack.started -= instance.OnLookBack;
            @LookBack.performed -= instance.OnLookBack;
            @LookBack.canceled -= instance.OnLookBack;
            @ChangeCameraView.started -= instance.OnChangeCameraView;
            @ChangeCameraView.performed -= instance.OnChangeCameraView;
            @ChangeCameraView.canceled -= instance.OnChangeCameraView;
            @RestartDeleteLater.started -= instance.OnRestartDeleteLater;
            @RestartDeleteLater.performed -= instance.OnRestartDeleteLater;
            @RestartDeleteLater.canceled -= instance.OnRestartDeleteLater;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(IDriveControlActions instance)
        {
            if (m_Wrapper.m_DriveControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDriveControlActions instance)
        {
            foreach (var item in m_Wrapper.m_DriveControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DriveControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DriveControlActions @DriveControl => new DriveControlActions(this);

    // UIControl
    private readonly InputActionMap m_UIControl;
    private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
    private readonly InputAction m_UIControl_PauseButton;
    public struct UIControlActions
    {
        private @StandartControls m_Wrapper;
        public UIControlActions(@StandartControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseButton => m_Wrapper.m_UIControl_PauseButton;
        public InputActionMap Get() { return m_Wrapper.m_UIControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
            @PauseButton.started += instance.OnPauseButton;
            @PauseButton.performed += instance.OnPauseButton;
            @PauseButton.canceled += instance.OnPauseButton;
        }

        private void UnregisterCallbacks(IUIControlActions instance)
        {
            @PauseButton.started -= instance.OnPauseButton;
            @PauseButton.performed -= instance.OnPauseButton;
            @PauseButton.canceled -= instance.OnPauseButton;
        }

        public void RemoveCallbacks(IUIControlActions instance)
        {
            if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlActions @UIControl => new UIControlActions(this);

    // MusicControl
    private readonly InputActionMap m_MusicControl;
    private List<IMusicControlActions> m_MusicControlActionsCallbackInterfaces = new List<IMusicControlActions>();
    private readonly InputAction m_MusicControl_NextMusicTrack;
    private readonly InputAction m_MusicControl_PreviousMusicTrack;
    private readonly InputAction m_MusicControl_PauseMusic;
    public struct MusicControlActions
    {
        private @StandartControls m_Wrapper;
        public MusicControlActions(@StandartControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextMusicTrack => m_Wrapper.m_MusicControl_NextMusicTrack;
        public InputAction @PreviousMusicTrack => m_Wrapper.m_MusicControl_PreviousMusicTrack;
        public InputAction @PauseMusic => m_Wrapper.m_MusicControl_PauseMusic;
        public InputActionMap Get() { return m_Wrapper.m_MusicControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MusicControlActions set) { return set.Get(); }
        public void AddCallbacks(IMusicControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MusicControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MusicControlActionsCallbackInterfaces.Add(instance);
            @NextMusicTrack.started += instance.OnNextMusicTrack;
            @NextMusicTrack.performed += instance.OnNextMusicTrack;
            @NextMusicTrack.canceled += instance.OnNextMusicTrack;
            @PreviousMusicTrack.started += instance.OnPreviousMusicTrack;
            @PreviousMusicTrack.performed += instance.OnPreviousMusicTrack;
            @PreviousMusicTrack.canceled += instance.OnPreviousMusicTrack;
            @PauseMusic.started += instance.OnPauseMusic;
            @PauseMusic.performed += instance.OnPauseMusic;
            @PauseMusic.canceled += instance.OnPauseMusic;
        }

        private void UnregisterCallbacks(IMusicControlActions instance)
        {
            @NextMusicTrack.started -= instance.OnNextMusicTrack;
            @NextMusicTrack.performed -= instance.OnNextMusicTrack;
            @NextMusicTrack.canceled -= instance.OnNextMusicTrack;
            @PreviousMusicTrack.started -= instance.OnPreviousMusicTrack;
            @PreviousMusicTrack.performed -= instance.OnPreviousMusicTrack;
            @PreviousMusicTrack.canceled -= instance.OnPreviousMusicTrack;
            @PauseMusic.started -= instance.OnPauseMusic;
            @PauseMusic.performed -= instance.OnPauseMusic;
            @PauseMusic.canceled -= instance.OnPauseMusic;
        }

        public void RemoveCallbacks(IMusicControlActions instance)
        {
            if (m_Wrapper.m_MusicControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMusicControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MusicControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MusicControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MusicControlActions @MusicControl => new MusicControlActions(this);

    // FPSButton
    private readonly InputActionMap m_FPSButton;
    private List<IFPSButtonActions> m_FPSButtonActionsCallbackInterfaces = new List<IFPSButtonActions>();
    private readonly InputAction m_FPSButton_FPS;
    public struct FPSButtonActions
    {
        private @StandartControls m_Wrapper;
        public FPSButtonActions(@StandartControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @FPS => m_Wrapper.m_FPSButton_FPS;
        public InputActionMap Get() { return m_Wrapper.m_FPSButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSButtonActions set) { return set.Get(); }
        public void AddCallbacks(IFPSButtonActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSButtonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSButtonActionsCallbackInterfaces.Add(instance);
            @FPS.started += instance.OnFPS;
            @FPS.performed += instance.OnFPS;
            @FPS.canceled += instance.OnFPS;
        }

        private void UnregisterCallbacks(IFPSButtonActions instance)
        {
            @FPS.started -= instance.OnFPS;
            @FPS.performed -= instance.OnFPS;
            @FPS.canceled -= instance.OnFPS;
        }

        public void RemoveCallbacks(IFPSButtonActions instance)
        {
            if (m_Wrapper.m_FPSButtonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSButtonActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSButtonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSButtonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSButtonActions @FPSButton => new FPSButtonActions(this);
    public interface IDriveControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLookBack(InputAction.CallbackContext context);
        void OnChangeCameraView(InputAction.CallbackContext context);
        void OnRestartDeleteLater(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
    public interface IUIControlActions
    {
        void OnPauseButton(InputAction.CallbackContext context);
    }
    public interface IMusicControlActions
    {
        void OnNextMusicTrack(InputAction.CallbackContext context);
        void OnPreviousMusicTrack(InputAction.CallbackContext context);
        void OnPauseMusic(InputAction.CallbackContext context);
    }
    public interface IFPSButtonActions
    {
        void OnFPS(InputAction.CallbackContext context);
    }
}
